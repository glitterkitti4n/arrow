diff --git a/ports/abseil/fix-universal2.patch b/ports/abseil/fix-universal2.patch
new file mode 100644
index 0000000000..c729e7ae48
--- /dev/null
+++ b/ports/abseil/fix-universal2.patch
@@ -0,0 +1,55 @@
+diff --git a/absl/copts/AbseilConfigureCopts.cmake b/absl/copts/AbseilConfigureCopts.cmake
+index 942ce90a4..15d6c895f 100644
+--- a/absl/copts/AbseilConfigureCopts.cmake
++++ b/absl/copts/AbseilConfigureCopts.cmake
+@@ -12,7 +12,49 @@ else()
+   set(ABSL_BUILD_DLL FALSE)
+ endif()
+
+-if(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|amd64|AMD64")
++if(APPLE AND CMAKE_CXX_COMPILER_ID MATCHES [[Clang]])
++  # Some CMake targets (not known at the moment of processing) could be set to
++  # compile for multiple architectures as specified by the OSX_ARCHITECTURES
++  # property, which is target-specific.  We should neither inspect nor rely on
++  # any CMake property or variable to detect an architecture, in particular:
++  #
++  #   - CMAKE_OSX_ARCHITECTURES
++  #     is just an initial value for OSX_ARCHITECTURES; set too early.
++  #
++  #   - OSX_ARCHITECTURES
++  #     is a per-target property; targets could be defined later, and their
++  #     properties could be modified any time later.
++  #
++  #   - CMAKE_SYSTEM_PROCESSOR
++  #     does not reflect multiple architectures at all.
++  #
++  # When compiling for multiple architectures, a build system can invoke a
++  # compiler either
++  #
++  #   - once: a single command line for multiple architectures (Ninja build)
++  #   - twice: two command lines per each architecture (Xcode build system)
++  #
++  # If case of Xcode, it would be possible to set an Xcode-specific attributes
++  # like XCODE_ATTRIBUTE_OTHER_CPLUSPLUSFLAGS[arch=arm64] or similar.
++  #
++  # In both cases, the viable strategy is to pass all arguments at once, allowing
++  # the compiler to dispatch arch-specific arguments to a designated backend.
++  set(ABSL_RANDOM_RANDEN_COPTS "")
++  foreach(_arch IN ITEMS "x86_64" "arm64")
++    string(TOUPPER "${_arch}" _arch_uppercase)
++    string(REPLACE "X86_64" "X64" _arch_uppercase ${_arch_uppercase})
++    foreach(_flag IN LISTS ABSL_RANDOM_HWAES_${_arch_uppercase}_FLAGS)
++      list(APPEND ABSL_RANDOM_RANDEN_COPTS "-Xarch_${_arch}" "${_flag}")
++    endforeach()
++  endforeach()
++  # If a compiler happens to deal with an argument for a currently unused
++  # architecture, it will warn about an unused command line argument.
++  option(ABSL_RANDOM_RANDEN_COPTS_WARNING OFF
++         "Warn if one of ABSL_RANDOM_RANDEN_COPTS is unused")
++  if(ABSL_RANDOM_RANDEN_COPTS AND NOT ABSL_RANDOM_RANDEN_COPTS_WARNING)
++    list(APPEND ABSL_RANDOM_RANDEN_COPTS "-Wno-unused-command-line-argument")
++  endif()
++elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|amd64|AMD64")
+   if (MSVC)
+     set(ABSL_RANDOM_RANDEN_COPTS "${ABSL_RANDOM_HWAES_MSVC_X64_FLAGS}")
+   else()
diff --git a/ports/abseil/portfile.cmake b/ports/abseil/portfile.cmake
index 1289eed36a..b010a69f13 100644
--- a/ports/abseil/portfile.cmake
+++ b/ports/abseil/portfile.cmake
@@ -15,6 +15,7 @@ vcpkg_from_github(
         # detection can cause ABI issues depending on which compiler options
         # are enabled for consuming user code
 	    fix-cxx-standard.patch
+        fix-universal2.patch
 )
 
 vcpkg_check_features(OUT_FEATURE_OPTIONS FEATURE_OPTIONS
diff --git a/ports/aws-sdk-cpp/fix-find-crypto.patch b/ports/aws-sdk-cpp/fix-find-crypto.patch
new file mode 100644
index 0000000000..aafc631e93
--- /dev/null
+++ b/ports/aws-sdk-cpp/fix-find-crypto.patch
@@ -0,0 +1,20 @@
+diff --git a/cmake/setup_cmake_find_module.cmake b/cmake/setup_cmake_find_module.cmake
+index f5f147a0f..4561b8c39 100644
+--- a/cmake/setup_cmake_find_module.cmake
++++ b/cmake/setup_cmake_find_module.cmake
+@@ -30,15 +30,6 @@ file(WRITE
+     "set(AWSSDK_INSTALL_BINDIR ${BINARY_DIRECTORY})\n"
+     "set(AWSSDK_INSTALL_INCLUDEDIR ${INCLUDE_DIRECTORY})\n"
+     "set(AWSSDK_INSTALL_ARCHIVEDIR ${ARCHIVE_DIRECTORY})\n"
+-    "if (NOT LibCrypto_INCLUDE_DIR)\n"
+-    "    set(LibCrypto_INCLUDE_DIR ${OPENSSL_INCLUDE_DIR} CACHE INTERNAL \"The OpenSSL include directory\")\n"
+-    "endif()\n"
+-    "if (NOT LibCrypto_STATIC_LIBRARY)\n"
+-    "    set(LibCrypto_STATIC_LIBRARY ${OPENSSL_CRYPTO_LIBRARY} CACHE INTERNAL \"The OpenSSL crypto static library\")\n"
+-    "endif()\n"
+-    "if (NOT LibCrypto_SHARED_LIBRARY)\n"
+-    "    set(LibCrypto_SHARED_LIBRARY ${OPENSSL_CRYPTO_LIBRARY} CACHE INTERNAL \"The OpenSSL crypto shared library\")\n"
+-    "endif()\n"
+     )
+
+ if (NOT SIMPLE_INSTALL)
diff --git a/ports/aws-sdk-cpp/portfile.cmake b/ports/aws-sdk-cpp/portfile.cmake
index b520a17ae3..ea9e770cf5 100644
--- a/ports/aws-sdk-cpp/portfile.cmake
+++ b/ports/aws-sdk-cpp/portfile.cmake
@@ -8,6 +8,7 @@ vcpkg_from_github(
     PATCHES
         patch-relocatable-rpath.patch
         fix-aws-root.patch
+        fix-find-crypto.patch
 )
 
 string(COMPARE EQUAL "${VCPKG_CRT_LINKAGE}" "dynamic" FORCE_SHARED_CRT)
diff --git a/ports/curl/portfile.cmake b/ports/curl/portfile.cmake
index f81d0c491d..e5ea9cef57 100644
--- a/ports/curl/portfile.cmake
+++ b/ports/curl/portfile.cmake
@@ -88,6 +88,10 @@ vcpkg_cmake_configure(
         -DCMAKE_DISABLE_FIND_PACKAGE_Perl=ON
         -DENABLE_DEBUG=ON
         -DCURL_CA_FALLBACK=ON
+        -DCURL_CA_PATH=none
+        -DCURL_CA_BUNDLE=none
+    OPTIONS_DEBUG
+        ${EXTRA_ARGS_DEBUG}
     OPTIONS_RELEASE
         ${OPTIONS_RELEASE}
     OPTIONS_DEBUG
diff --git a/ports/snappy/portfile.cmake b/ports/snappy/portfile.cmake
index 45b8c706db..b409d8a7be 100644
--- a/ports/snappy/portfile.cmake
+++ b/ports/snappy/portfile.cmake
@@ -4,6 +4,7 @@ vcpkg_from_github(
     REF 1.1.9
     SHA512 f1f8a90f5f7f23310423574b1d8c9acb84c66ea620f3999d1060395205e5760883476837aba02f0aa913af60819e34c625d8308c18a5d7a9c4e190f35968b024
     HEAD_REF master
+    PATCHES "snappy-disable-bmi.patch"
 )
 
 vcpkg_cmake_configure(
diff --git a/ports/snappy/snappy-disable-bmi.patch b/ports/snappy/snappy-disable-bmi.patch
new file mode 100644
index 0000000000..a57ce0c22f
--- /dev/null
+++ b/ports/snappy/snappy-disable-bmi.patch
@@ -0,0 +1,19 @@
+diff --git a/snappy.cc b/snappy.cc
+index 79dc0e8..f3153ea 100644
+--- a/snappy.cc
++++ b/snappy.cc
+@@ -965,14 +965,10 @@ static inline void Report(const char *algorithm, size_t compressed_size,
+ static inline uint32_t ExtractLowBytes(uint32_t v, int n) {
+   assert(n >= 0);
+   assert(n <= 4);
+-#if SNAPPY_HAVE_BMI2
+-  return _bzhi_u32(v, 8 * n);
+-#else
+   // This needs to be wider than uint32_t otherwise `mask << 32` will be
+   // undefined.
+   uint64_t mask = 0xffffffff;
+   return v & ~(mask << (8 * n));
+-#endif
+ }
+ 
+ static inline bool LeftShiftOverflows(uint8_t value, uint32_t shift) {
